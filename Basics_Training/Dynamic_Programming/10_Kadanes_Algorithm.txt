Question: Find the sum of the 'maximum sum subarray'.

Write a function that takes in a non-empty array of integers and returns the maximum sum that can be obtained by summing up all the numbers in a non-empty subarray of the input array. A subarray must only contain adjacent numbers.

Sample Input: [3,5,-9,1,3,-2,3,4,7,2,-9,6,3,1,-5,4]
Sample Output: 19 for the subarray [1,3,-2,3,4,7,2,-9,6,3,1]

----------------------------- Kadanes Algorithm --------------------------------
1: Make variables 'max_sum_here' and 'max_so_far'.
2: Traverse the array. At each element in the array calculate:
    max_sum+here = max((max_sum_here + this element),this element)
    max_so_far = max(max_so_far , max_sum_here)
3: At the end of the traversal you will get the sum of the 'maximum sum sub array' in the variable 'max_so_far'.

Q: Why does this work?
A:
---------------------------------- CODE ----------------------------------------

#include <vector>
using namespace std;

int kadanesAlgorithm(vector<int> array) {
	if(array.size()==0)return 0;
  int max_ending_here = array[0];
	int max_so_far = array[0];
	for(int i = 1; i < array.size(); i++)
	{
		max_ending_here = max((max_ending_here + array[i]),array[i]);
		max_so_far = max(max_so_far,max_ending_here);
	}
	return max_so_far;
}
--------------------------------------------------------------------------------
