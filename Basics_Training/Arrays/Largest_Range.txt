Question: Largest Range

Write a function that takes in an array of integers and returns an array of length 2 representing the largest range of numbers contained in that array. The first number in the output array should be the first number in the range while the second number should be the last number in the range. A range of numbers is defined as a set of numbers that come right after each other in the set of real integers. For instance, the output array [2, 6] represents the range {2, 3, 4, 5, 6}, which is a range of length 5. Note that numbers do not need to be ordered or adjacent in the array in order to form a range. Assume that there will only be one largest range.

Sample Input: [5,2,1,3]
Sample Output: [1,3]

Notice the the numbers 1,2 and 3 which are in the range [1,3] are present in the input array. Also this is the largest range possible of the two ranges that are: [1,3] and [5];

Sample Input: [1,11,3,0,15,5,2,4,10,7,12,6]
Sample Output: [0,7]

Notice that the numbers 0,1,2,3,4,5,6 and 7 which are in the range [0,7] are present in the input array. Also this is the largest range possible of the three ranges that are: [0,7],[10,12] and [15].

--------------------------------- NAIVE IDEA -----------------------------------
1: Sort the array.
2: Store 3 variables: start, end and size.
2: Start to traverse the array with i.
3: Assume a[i] is the start of a range.
4: Use j and try and run till the end of the array and check if (a[j+1] == a[j] or a[j] == a[j+1]). If yes then continue with j++ else we found the end of the range, so break.
5: calculate the size of the range that u found by: j-i+1. If the calculated size is greater than the current size then update the size, start and end variable.
6: Return the tuple: [a[start],a[end]].

Time: O(N^2) in worst case like [1,2,3,4,5]
Space: O(logN) if Quick Sort is used with optimal implementation.
---------------------------------- CODE FOR NAIVE IDEA--------------------------

#include <vector>
using namespace std;

int partition(vector<int> *array, int low, int high)
{
	int i = low;
	int j = low - 1;
	for(; i < high; i++)
	{
		if(array->at(i) < array->at(high))
		{
			swap(array->at(++j),array->at(i));
		}
	}
	swap(array->at(++j),array->at(high));
	return j;
}

void qs(vector<int> *array, int low, int high)
{
	if(low < high)
	{
		int p = partition(array,low,high);
		qs(array,low,p - 1);
		qs(array,p + 1,high);
	}
}

vector<int> largestRange(vector<int> array) {
  qs(&array,0,array.size() - 1);
	int start = 0;
	int end = 0;
	int size = 0;
	for(int i = 0 ; i < array.size(); i++)
	{
		int j = i;
		while(j < array.size() && (array[j+1] == array[j] + 1 || array[j+1] == array[j]))
		{
			j++;
		}
		if(j-i+1 > size)
		{
			start = i;
			end = j;
			size = j - i + 1;
		}
	}
	return vector<int>{array[start],array[end]};
}
--------------------------------------------------------------------------------
-------------------------- THE BEST IDEA ---------------------------------------
1: Make a hash map and insert the pair: <a[i],0> for each element in the input array.
2: Start to traverse the array and do for each element:
  a: Say the element is 2. Then check how many of the numbers in the range [1,-inf] are in the hash table. As you find a number mark its second entry in its pair as 1.
	b: Say the element is 2. Then check how many of the numbers in the range [3,infy] are in the hash table. As you find a number mark its second entry in its pair is 1.
	c: now the range is [minimum left number , maximum right number].
	d: If this range is greater than the range previously found then update the largest range accordingly.
3: Return the largest range at the end.

Time: O(N) - First we take O(N) time to build the hash table. Second and very importantly we look at each number at max 2 times, once if it is part of a range and second when we actually traverse through it.
Space: O(N) - As we maintain a hash table. The rest is just variables.

----------------------------------- CODE ---------------------------------------

#include <vector>
#include <map>
using namespace std;

vector<int> largestRange(vector<int> array) {
  map<int,int> m;
	for(int i = 0; i < array.size(); i++)
	{
		if(m.find(array[i]) == m.end())m.insert({array[i],0});
	}

	int left_extreme = 1;
	int right_extreme = 0;

	// why 1 and 0 because size = right_extreme - left_extreme = 0 - 1 = -1. This allows us to set the initial size of the largest range to -1. Which is obviously needed in the case when the largest range just a single digit.

	for(int i = 0; i < array.size(); i++)
	{
		auto itr = m.find(array[i]);
		if(itr->second == 0)
		{
			itr->second = 1;
			int l = array[i];
			int r = array[i];
			while(m.find(l) != m.end())l--;
			while(m.find(r) != m.end())r++;
			if(--r - ++l > right_extreme - left_extreme)
			{
				left_extreme = l;
				right_extreme = r;
			}
		}
	}
	return vector<int>{left_extreme,right_extreme};
}
--------------------------------------------------------------------------------
